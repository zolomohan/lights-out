{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","flipCellsAround","react_default","a","createElement","className","isLit","onClick","Component","Board","restart","setState","hasWon","board","createBoard","randomBoolean","Math","floor","random","state","_this$props","nrows","ncols","i","j","coord","_this$props2","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","every","row","cell","_this2","id","class","key","src_Cell_0","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4132d9c.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  handleClick = () => {\n    this.props.flipCellsAround();\n  }\n\n  render() {\n    return <td className={\"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\")} onClick={this.handleClick} />\n  }\n}\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n\n    static defaultProps = {\n        nrows: 5,\n        ncols: 5\n    }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        hasWon: false,\n        board: this.createBoard()\n    }\n  }\n\n  restart = () => {\n      this.setState({hasWon: false, board: this.createBoard()});\n  }\n\n  randomBoolean = () => (Math.floor(Math.random() * 4)) === 0 ? true: false;\n\n  createBoard() {\n    let {nrows, ncols} = this.props;\n    let board = [];\n    for(var i = 0; i < nrows; i++){\n        board[i] = [];\n        for(var j=0; j < ncols; j++){\n            board[i][j] = this.randomBoolean();\n        }\n    }\n    return board\n  }\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    function flipCell(y, x) {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x);\n    flipCell(y-1, x);\n    flipCell(y+1, x);\n    flipCell(y, x-1);\n    flipCell(y, x+1);\n    let hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({board, hasWon});\n  }\n\n  render() {\n    return(\n        (this.state.hasWon \n            ?   <div>\n                <div className=\"Board-title winner\">\n                <div className=\"neon\">You</div>\n                <div className=\"flux\">Win</div>\n                </div>\n                <button className=\"neon\" id=\"restartBtn\" onClick={this.restart}>Restart</button>\n                </div> \n            :   <div>\n                <div class=\"Board-title\">\n                    <div class=\"neon\">Lights</div>\n                    <div class=\"flux\">Out</div>\n                </div>\n                <table className=\"Board\">\n                <tbody>\n                    {this.state.board.map( (row,i) => \n                        <tr key={i}> \n                            {row.map( (cell, j) => \n                                <Cell\n                                    key={i+'-'+j} \n                                    isLit={cell} \n                                    flipCellsAround = {() => this.flipCellsAround(i+'-'+j)}  \n                                />)\n                            }\n                        </tr>)\n                    }\n                </tbody>\n                </table>\n                </div>)\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}